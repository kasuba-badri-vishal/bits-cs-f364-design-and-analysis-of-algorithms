Strongly Connected Components

    * A Classic application of DFS.
    * Implemented in Directed Graphs
    * Given G = (V,E) need to find set C, such that C is subset of V and u,v belongs to C such that u->v and v->u
    * Transpose of G contains edges that are transpose of edges of E in G.(Reversed Directions of Graph)
    * Time to create transpose of G is O(V+E) by using adjacency lists for representing Graphs
    * Both G and G' has same strongly connected Components.

1st Algorithm : [ Kosaraju Algorithm ]
    * Computes strongly connected Components in O(V+E) linear time using 2 DFS methods.

    Pseudocode of STRONGLY-CONNECTED-COMPONENTS(G) :
        1. Call DFS(G) to compute finishing times u.f for each vertex u.
        2. Compute G'
        3. Call DFS(G'). but in the main loop of DFS, consider the vertices in order of decreasing u.f
        4. Output the vertices of each tree in the Depth-First Forest formed in 3 as a separate strongly connected Component 