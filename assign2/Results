The Ford-Fulkerson algorithm is an algorithm that tackles the max-flow min-cut problem. If a network with vertices and edges between those vertices that have certain weights is given, it gives an answer to how much "flow" the network is capable of processing at a time. 
It was put forth in 1956 by Ford and Fulkerson.
The Ford-Fulkerson algorithm assumes that the input will be a graph, along with a source vertex, and a sink vertex.

Time complexity

The Ford-Fulkerson algorithm, computing max-flow in the network runs in O(mC) time.
m=No. of edges, C=max. flow (sum of weights of edges leaving the source)

Maximum Bipartite Match

This can be converted into a network flow problem to find the maximal match. Turn the given graph into a directed one and add source and sink vertices. The next step would be to add edges directed from the source to all nodes in the 1st set, and from all nodes in the 2nd set to the sink. All these edges have a weight of 1 unit. 
Now, running the Ford-Fulkerson algorithm on this graph gives us the maximal match (corresponding to the maximum flow).

Time complexity:
Ford-Fulkerson runs in O(mC) time. Let the number of vertices in the given bipartite graph be 'n'. Then, 'C' in O(mC) is 'n' in this case (as there are n edges of weight 1 each coming out from the source.)
The total no. of edges = No. of edges in the given bipartite graph (say 'm')+ 2n (edges from source and to sink)= m+2n
O((m+2n)n)= O(mn)
Hence, this takes O(mn) time
m= Given no. of edges, n= No. of vertices


